{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP84ZMSjjAexFF5ZsWbKioL"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":106},"id":"s4vGXSVUVBKc","executionInfo":{"status":"error","timestamp":1742472855052,"user_tz":-330,"elapsed":1584,"user":{"displayName":"Poonguzhali P","userId":"02549635751542402747"}},"outputId":"7b108204-ceda-4664-b4cf-4fb998872867"},"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"invalid syntax (<ipython-input-1-d25ca1136b36>, line 88)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-d25ca1136b36>\"\u001b[0;36m, line \u001b[0;32m88\u001b[0m\n\u001b[0;31m    -\u001b[0m\n\u001b[0m     ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}],"source":["# 1️⃣ Import Required Libraries\n","import pandas as pd\n","import numpy as np\n","from sklearn.preprocessing import StandardScaler, MinMaxScaler, LabelEncoder\n","\n","# Sample Dataset Creation (for demonstration)\n","data = {\n","    \"Student\": [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\"],\n","    \"Age\": [20, 21, np.nan, 19, 22, 21],\n","    \"Marks\": [85, 78, 92, np.nan, 74, 80],\n","    \"Attendance\": [90, 85, np.nan, 88, 80, 95],\n","    \"Passed\": [\"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", np.nan]\n","}\n","df = pd.DataFrame(data)\n","\n","print(\"Original Dataset:\")\n","print(df)\n","\n","# 2️⃣ Handling Missing Values & Duplicates\n","print(\"\\nMissing Values Count:\")\n","print(df.isnull().sum())\n","\n","# Fill Missing Numerical Values with Mean\n","df[\"Age\"].fillna(df[\"Age\"].mean(), inplace=True)\n","df[\"Marks\"].fillna(df[\"Marks\"].median(), inplace=True)\n","df[\"Attendance\"].fillna(df[\"Attendance\"].mean(), inplace=True)\n","\n","# Fill Categorical Data with Mode\n","df[\"Passed\"].fillna(df[\"Passed\"].mode()[0], inplace=True)\n","\n","print(\"\\nDataset after Handling Missing Values:\")\n","print(df)\n","\n","# Remove Duplicates\n","df.drop_duplicates(inplace=True)\n","\n","# 3️⃣ Data Transformation: Scaling & Encoding\n","# Standardization (Z-score Normalization)\n","scaler = StandardScaler()\n","df_scaled = df.copy()\n","df_scaled[[\"Marks\", \"Attendance\"]] = scaler.fit_transform(df[[\"Marks\", \"Attendance\"]])\n","\n","print(\"\\nDataset after Standardization:\")\n","print(df_scaled)\n","\n","# Min-Max Scaling\n","scaler = MinMaxScaler()\n","df_scaled[[\"Marks\", \"Attendance\"]] = scaler.fit_transform(df[[\"Marks\", \"Attendance\"]])\n","\n","print(\"\\nDataset after Min-Max Scaling:\")\n","print(df_scaled)\n","\n","# One-Hot Encoding (Convert Categorical Data)\n","df_encoded = pd.get_dummies(df, columns=[\"Passed\"], drop_first=True)\n","print(\"\\nDataset after One-Hot Encoding:\")\n","print(df_encoded)\n","\n","# Label Encoding\n","encoder = LabelEncoder()\n","df[\"Passed\"] = encoder.fit_transform(df[\"Passed\"])\n","print(\"\\nDataset after Label Encoding:\")\n","print(df)\n","\n","# 4️⃣ Feature Engineering\n","# Creating a New Feature: Performance Category\n","def performance_category(marks):\n","    if marks >= 85:\n","        return \"High\"\n","    elif marks >= 70:\n","        return \"Medium\"\n","    else:\n","        return \"Low\"\n","\n","df[\"Performance\"] = df[\"Marks\"].apply(performance_category)\n","print(\"\\nDataset with Performance Category:\")\n","print(df)\n","\n","# Binning (Categorizing Age Groups)\n","df[\"Age_Group\"] = pd.cut(df[\"Age\"], bins=[18, 21, 24], labels=[\"Young\", \"Adult\"])\n","print(\"\\nDataset with Age Groups:\")\n","print(df)\n","\n","# Saving Processed Data\n","df.to_csv(\"processed_student_data.csv\", index=False)\n","from google.colab import files\n","files.download(\"processed_student_data.csv\")\n","\n","-"]}]}