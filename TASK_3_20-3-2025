{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNSsK990yWka0MUYjaH5eWp"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"eSDgDjh6eqkd","executionInfo":{"status":"ok","timestamp":1742472958729,"user_tz":-330,"elapsed":2640,"user":{"displayName":"Poonguzhali P","userId":"02549635751542402747"}},"outputId":"12aba2b0-621e-4ff2-a573-b7dbb23d3968"},"outputs":[{"output_type":"stream","name":"stdout","text":["Original Dataset:\n","   Student   Age  Marks  Attendance Passed\n","0    Alice  20.0   85.0        90.0    Yes\n","1      Bob  21.0   78.0        85.0     No\n","2  Charlie   NaN   92.0         NaN    Yes\n","3    David  19.0    NaN        88.0    Yes\n","4      Eve  22.0   74.0        80.0     No\n","5    Frank  21.0   80.0        95.0    NaN\n","\n","Missing Values Count:\n","Student       0\n","Age           1\n","Marks         1\n","Attendance    1\n","Passed        1\n","dtype: int64\n","\n","Dataset after Handling Missing Values:\n","   Student   Age  Marks  Attendance Passed\n","0    Alice  20.0   85.0        90.0    Yes\n","1      Bob  21.0   78.0        85.0     No\n","2  Charlie  20.6   92.0        87.6    Yes\n","3    David  19.0   80.0        88.0    Yes\n","4      Eve  22.0   74.0        80.0     No\n","5    Frank  21.0   80.0        95.0    Yes\n","\n","Dataset after Standardization:\n","   Student   Age     Marks    Attendance Passed\n","0    Alice  20.0  0.613155  5.253935e-01    Yes\n","1      Bob  21.0 -0.613155 -5.691763e-01     No\n","2  Charlie  20.6  1.839465 -3.110955e-15    Yes\n","3    David  19.0 -0.262781  8.756558e-02    Yes\n","4      Eve  22.0 -1.313904 -1.663746e+00     No\n","5    Frank  21.0 -0.262781  1.619963e+00    Yes\n","\n","Dataset after Min-Max Scaling:\n","   Student   Age     Marks  Attendance Passed\n","0    Alice  20.0  0.611111    0.666667    Yes\n","1      Bob  21.0  0.222222    0.333333     No\n","2  Charlie  20.6  1.000000    0.506667    Yes\n","3    David  19.0  0.333333    0.533333    Yes\n","4      Eve  22.0  0.000000    0.000000     No\n","5    Frank  21.0  0.333333    1.000000    Yes\n","\n","Dataset after One-Hot Encoding:\n","   Student   Age  Marks  Attendance  Passed_Yes\n","0    Alice  20.0   85.0        90.0        True\n","1      Bob  21.0   78.0        85.0       False\n","2  Charlie  20.6   92.0        87.6        True\n","3    David  19.0   80.0        88.0        True\n","4      Eve  22.0   74.0        80.0       False\n","5    Frank  21.0   80.0        95.0        True\n","\n","Dataset after Label Encoding:\n","   Student   Age  Marks  Attendance  Passed\n","0    Alice  20.0   85.0        90.0       1\n","1      Bob  21.0   78.0        85.0       0\n","2  Charlie  20.6   92.0        87.6       1\n","3    David  19.0   80.0        88.0       1\n","4      Eve  22.0   74.0        80.0       0\n","5    Frank  21.0   80.0        95.0       1\n","\n","Dataset with Performance Category:\n","   Student   Age  Marks  Attendance  Passed Performance\n","0    Alice  20.0   85.0        90.0       1        High\n","1      Bob  21.0   78.0        85.0       0      Medium\n","2  Charlie  20.6   92.0        87.6       1        High\n","3    David  19.0   80.0        88.0       1      Medium\n","4      Eve  22.0   74.0        80.0       0      Medium\n","5    Frank  21.0   80.0        95.0       1      Medium\n","\n","Dataset with Age Groups:\n","   Student   Age  Marks  Attendance  Passed Performance Age_Group\n","0    Alice  20.0   85.0        90.0       1        High     Young\n","1      Bob  21.0   78.0        85.0       0      Medium     Young\n","2  Charlie  20.6   92.0        87.6       1        High     Young\n","3    David  19.0   80.0        88.0       1      Medium     Young\n","4      Eve  22.0   74.0        80.0       0      Medium     Adult\n","5    Frank  21.0   80.0        95.0       1      Medium     Young\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-1-31e6ef7429cf>:24: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df[\"Age\"].fillna(df[\"Age\"].mean(), inplace=True)\n","<ipython-input-1-31e6ef7429cf>:25: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df[\"Marks\"].fillna(df[\"Marks\"].median(), inplace=True)\n","<ipython-input-1-31e6ef7429cf>:26: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df[\"Attendance\"].fillna(df[\"Attendance\"].mean(), inplace=True)\n","<ipython-input-1-31e6ef7429cf>:29: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df[\"Passed\"].fillna(df[\"Passed\"].mode()[0], inplace=True)\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_8c806393-aa33-4160-a1b9-606013192afe\", \"processed_student_data.csv\", 268)"]},"metadata":{}}],"source":["# 1️⃣ Import Required Libraries\n","import pandas as pd\n","import numpy as np\n","from sklearn.preprocessing import StandardScaler, MinMaxScaler, LabelEncoder\n","\n","# Sample Dataset Creation (for demonstration)\n","data = {\n","    \"Student\": [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\"],\n","    \"Age\": [20, 21, np.nan, 19, 22, 21],\n","    \"Marks\": [85, 78, 92, np.nan, 74, 80],\n","    \"Attendance\": [90, 85, np.nan, 88, 80, 95],\n","    \"Passed\": [\"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", np.nan]\n","}\n","df = pd.DataFrame(data)\n","\n","print(\"Original Dataset:\")\n","print(df)\n","\n","# 2️⃣ Handling Missing Values & Duplicates\n","print(\"\\nMissing Values Count:\")\n","print(df.isnull().sum())\n","\n","# Fill Missing Numerical Values with Mean\n","df[\"Age\"].fillna(df[\"Age\"].mean(), inplace=True)\n","df[\"Marks\"].fillna(df[\"Marks\"].median(), inplace=True)\n","df[\"Attendance\"].fillna(df[\"Attendance\"].mean(), inplace=True)\n","\n","# Fill Categorical Data with Mode\n","df[\"Passed\"].fillna(df[\"Passed\"].mode()[0], inplace=True)\n","\n","print(\"\\nDataset after Handling Missing Values:\")\n","print(df)\n","\n","# Remove Duplicates\n","df.drop_duplicates(inplace=True)\n","\n","# 3️⃣ Data Transformation: Scaling & Encoding\n","# Standardization (Z-score Normalization)\n","scaler = StandardScaler()\n","df_scaled = df.copy()\n","df_scaled[[\"Marks\", \"Attendance\"]] = scaler.fit_transform(df[[\"Marks\", \"Attendance\"]])\n","\n","print(\"\\nDataset after Standardization:\")\n","print(df_scaled)\n","\n","# Min-Max Scaling\n","scaler = MinMaxScaler()\n","df_scaled[[\"Marks\", \"Attendance\"]] = scaler.fit_transform(df[[\"Marks\", \"Attendance\"]])\n","\n","print(\"\\nDataset after Min-Max Scaling:\")\n","print(df_scaled)\n","\n","# One-Hot Encoding (Convert Categorical Data)\n","df_encoded = pd.get_dummies(df, columns=[\"Passed\"], drop_first=True)\n","print(\"\\nDataset after One-Hot Encoding:\")\n","print(df_encoded)\n","\n","# Label Encoding\n","encoder = LabelEncoder()\n","df[\"Passed\"] = encoder.fit_transform(df[\"Passed\"])\n","print(\"\\nDataset after Label Encoding:\")\n","print(df)\n","\n","# 4️⃣ Feature Engineering\n","# Creating a New Feature: Performance Category\n","def performance_category(marks):\n","    if marks >= 85:\n","        return \"High\"\n","    elif marks >= 70:\n","        return \"Medium\"\n","    else:\n","        return \"Low\"\n","\n","df[\"Performance\"] = df[\"Marks\"].apply(performance_category)\n","print(\"\\nDataset with Performance Category:\")\n","print(df)\n","\n","# Binning (Categorizing Age Groups)\n","df[\"Age_Group\"] = pd.cut(df[\"Age\"], bins=[18, 21, 24], labels=[\"Young\", \"Adult\"])\n","print(\"\\nDataset with Age Groups:\")\n","print(df)\n","\n","# Saving Processed Data\n","df.to_csv(\"processed_student_data.csv\", index=False)\n","from google.colab import files\n","files.download(\"processed_student_data.csv\")\n"]}]}